{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["SynopsisFunction","_ref","synopsis","react_default","a","createElement","GenresFunction","_ref2","genres","className","map","data","TitleFunction","_ref3","title","RatingFunction","_ref4","rating","MoviePosterFunction","_ref5","poster","src","Movie","state","hello","this","props","Component","App","fetch","json","jsonData","movies","movie","medium_cover_image","title_long","setState","index","src_Movie_0","key","_renderMovie","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qTAkCA,SAASA,EAATC,GAAwC,IAAZC,EAAYD,EAAZC,SAC1B,OAAOC,EAAAC,EAAAC,cAAA,SAAIH,GAGb,SAASI,EAATC,GAAoC,IAAVC,EAAUD,EAAVC,OACxB,OACEL,EAAAC,EAAAC,cAAA,QAAMI,UAAU,gBACb,IACAD,EAAOE,IAAI,SAAAC,GACV,OAAOA,EAAO,MACZ,KAIV,SAASC,EAATC,GAAkC,IAATC,EAASD,EAATC,MACvB,OAAOX,EAAAC,EAAAC,cAAA,UAAKS,GAEd,SAASC,EAATC,GAAoC,IAAVC,EAAUD,EAAVC,OACxB,OAAOd,EAAAC,EAAAC,cAAA,UAAKY,GAEd,SAASC,EAATC,GAAyC,IAAVC,EAAUD,EAAVC,OAC7B,OAAOjB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,gBAAgBY,IAAKD,IAO9BE,iNAtDbC,MAAQ,CACNC,MAAO,4KAUP,OACErB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SACbN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACa,EAAD,CAAqBE,OAAQK,KAAKC,MAAMf,KAAKS,UAE/CjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACO,EAAD,CAAeE,MAAOW,KAAKC,MAAMf,KAAKG,QACtCX,EAAAC,EAAAC,cAACU,EAAD,CAAgBE,OAAQQ,KAAKC,MAAMf,KAAKM,SACxCd,EAAAC,EAAAC,cAACC,EAAD,CAAgBE,OAAQiB,KAAKC,MAAMf,KAAKH,SACxCL,EAAAC,EAAAC,cAACL,EAAD,CAAkBE,SAAUuB,KAAKC,MAAMf,KAAKT,oBAxBlCyB,aCwCLC,6MAhCbL,MAAQ,sNAEWM,MACf,uEADElB,kBAGiBA,EAAKmB,qBAAtBC,cACJN,cACgBM,EAASpB,KAAKqB,OAAOtB,IAAI,SAAAuB,GACrC,MAAO,CACLb,OAAQa,EAAMC,mBACdpB,MAAOmB,EAAME,WACblB,OAAQgB,EAAMhB,OACdT,OAAQyB,EAAMzB,OACdN,SAAU+B,EAAM/B,qCANpB8B,kBADGI,mKAaL,OAAOX,KAAKF,MAAMS,OAAOtB,IAAI,SAACC,EAAM0B,GAClC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,CAAO3B,KAAMA,EAAM4B,IAAKF,uCAIjC,OACElC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACZgB,KAAKF,MAAMS,OAASP,KAAKe,eAAiB,iBA3BjCb,aCCEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4a108276.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Movie.css\";\n\nclass Movie extends Component {\n  static propTypes = {\n    data: PropTypes.object\n  };\n  state = {\n    hello: \"world\"\n  };\n  componentWillMount() {\n    // console.log(\"will mount\");\n  }\n  componentDidMount() {\n    // console.log(\"after render\");\n  }\n  render() {\n    // console.log(\"render\");\n    return (\n      <div className=\"Movie\">\n        <div>\n          <MoviePosterFunction poster={this.props.data.poster} />\n        </div>\n        <div>\n          <TitleFunction title={this.props.data.title} />\n          <RatingFunction rating={this.props.data.rating} />\n          <GenresFunction genres={this.props.data.genres} />\n          <SynopsisFunction synopsis={this.props.data.synopsis} />\n        </div>\n      </div>\n    );\n  }\n}\nfunction SynopsisFunction({ synopsis }) {\n  return <p>{synopsis}</p>;\n}\n\nfunction GenresFunction({ genres }) {\n  return (\n    <span className=\"Movie__Genre\">\n      {\" \"}\n      {genres.map(data => {\n        return data + \" \";\n      })}{\" \"}\n    </span>\n  );\n}\nfunction TitleFunction({ title }) {\n  return <h1>{title}</h1>;\n}\nfunction RatingFunction({ rating }) {\n  return <h3>{rating}</h3>;\n}\nfunction MoviePosterFunction({ poster }) {\n  return <img className=\"Movie__Poster\" src={poster} />;\n}\n\nMoviePosterFunction.propTypes = {\n  poster: PropTypes.string.isRequired\n};\n\nexport default Movie;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Movie from \"./Movie\";\nimport movieData from \"./movieData\";\n/**\n * jsonData.data.movies.medium_cover_image\n * jsonData.data.movies.title_long\n * @param {Number} jsonData.data.movies.rating\n * @param {Array} jsonData.data.movies.genres\n * @param {String}  jsonData.data.movies.synopsis\n */\nclass App extends Component {\n  state = {};\n  async componentDidMount() {\n    let data = await fetch(\n      \"https://yts.am/api/v2/list_movies.json?sort_by=rating\"\n    );\n    let jsonData = await data.json();\n    this.setState({\n      movies: await jsonData.data.movies.map(movie => {\n        return {\n          poster: movie.medium_cover_image,\n          title: movie.title_long,\n          rating: movie.rating,\n          genres: movie.genres,\n          synopsis: movie.synopsis\n        };\n      })\n    });\n  }\n  _renderMovie() {\n    return this.state.movies.map((data, index) => {\n      return <Movie data={data} key={index} />;\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.movies ? this._renderMovie() : \"Loding\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}